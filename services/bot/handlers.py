"""Command handlers for Telegram bot."""

import logging
from typing import Optional

from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from database import get_db_manager
from database.repositories import ChatRepository, MirrorRepository, UserRepository

from .keyboards import *
from .menus import *
from .settings_manager import SettingsManager

logger = logging.getLogger(__name__)


class BotHandlers:
    """Handler class for bot commands and callbacks."""
    
    def __init__(self):
        self.db_manager = get_db_manager()
        self.settings_manager = SettingsManager()
    
    async def handle_start_command(self, message: Message) -> None:
        """Handle /start command."""
        try:
            # Log incoming message
            user_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
            username = message.from_user.username
            logger.info(
                f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user_name} (@{username or 'no_username'}, ID: {message.from_user.id})"
            )
            
            text = get_main_menu_text()
            keyboard = get_main_menu_keyboard()
            await message.answer(text, reply_markup=keyboard)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {message.from_user.id})")
        except Exception as e:
            logger.exception("Error in start command")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    
    async def handle_settings_command(self, message: Message) -> None:
        """Handle /settings command."""
        try:
            # Log incoming message
            user_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
            username = message.from_user.username
            logger.info(
                f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /settings –æ—Ç {user_name} (@{username or 'no_username'}, ID: {message.from_user.id})"
            )
            
            from config import get_settings
            settings = get_settings()
            text = get_settings_menu_text()
            keyboard = get_settings_keyboard(render_enabled=settings.mirror.render_images)
            await message.answer(text, reply_markup=keyboard)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {message.from_user.id})")
        except Exception as e:
            logger.exception("Error in settings command")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def handle_mirrors_command(self, message: Message) -> None:
        """Handle /mirrors command."""
        try:
            # Log incoming message
            user_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
            username = message.from_user.username
            logger.info(
                f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /mirrors –æ—Ç {user_name} (@{username or 'no_username'}, ID: {message.from_user.id})"
            )
            
            async with self.db_manager.get_session() as session:
                mirror_repo = MirrorRepository(session)
                mirrors = await mirror_repo.get_active_mirrors()
            
            text = get_mirrors_menu_text(len(mirrors))
            keyboard = get_mirror_list_keyboard(mirrors)
            await message.answer(text, reply_markup=keyboard)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –∑–µ—Ä–∫–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {message.from_user.id})")
        except Exception as e:
            logger.exception("Error in mirrors command")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–µ—Ä–∫–∞–ª")
    
    async def handle_chats_command(self, message: Message) -> None:
        """Handle /chats command."""
        try:
            # Log incoming message
            user_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
            username = message.from_user.username
            logger.info(
                f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /chats –æ—Ç {user_name} (@{username or 'no_username'}, ID: {message.from_user.id})"
            )
            
            async with self.db_manager.get_session() as session:
                chat_repo = ChatRepository(session)
                source_chats = await chat_repo.get_source_chats()
                target_chats = await chat_repo.get_target_chats()
            
            text = get_chats_menu_text(len(source_chats), len(target_chats))
            keyboard = get_chats_keyboard()
            await message.answer(text, reply_markup=keyboard)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {message.from_user.id})")
        except Exception as e:
            logger.exception("Error in chats command")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤")
    
    async def handle_users_command(self, message: Message) -> None:
        """Handle /users command."""
        try:
            # Log incoming message
            user_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
            username = message.from_user.username
            logger.info(
                f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /users –æ—Ç {user_name} (@{username or 'no_username'}, ID: {message.from_user.id})"
            )
            
            async with self.db_manager.get_session() as session:
                user_repo = UserRepository(session)
                admins = await user_repo.get_admins()
                allowed_users = await user_repo.get_allowed_users()
            
            text = get_users_menu_text(len(admins), len(allowed_users))
            keyboard = get_users_keyboard()
            await message.answer(text, reply_markup=keyboard)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {message.from_user.id})")
        except Exception as e:
            logger.exception("Error in users command")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    async def handle_stats_command(self, message: Message) -> None:
        """Handle /stats command."""
        try:
            # Log incoming message
            user_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
            username = message.from_user.username
            logger.info(
                f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –æ—Ç {user_name} (@{username or 'no_username'}, ID: {message.from_user.id})"
            )
            
            async with self.db_manager.get_session() as session:
                mirror_repo = MirrorRepository(session)
                chat_repo = ChatRepository(session)
                user_repo = UserRepository(session)
                
                mirrors = await mirror_repo.get_active_mirrors()
                chats = await chat_repo.get_source_chats()
                users = await user_repo.get_allowed_users()
            
            text = get_stats_menu_text(len(mirrors), len(chats), len(users))
            keyboard = get_stats_keyboard()
            await message.answer(text, reply_markup=keyboard)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {message.from_user.id})")
        except Exception as e:
            logger.exception("Error in stats command")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def handle_callback_query(self, callback: CallbackQuery) -> None:
        """Handle callback queries from inline keyboards."""
        if not callback.data:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        try:
            # Log callback query
            user_name = f"{callback.from_user.first_name or ''} {callback.from_user.last_name or ''}".strip()
            username = callback.from_user.username
            logger.info(
                f"üì• Callback query '{callback.data}' –æ—Ç {user_name} (@{username or 'no_username'}, ID: {callback.from_user.id})"
            )
            
            data = callback.data
            
            # Main menu callbacks
            if data == "main_menu":
                await self._show_main_menu(callback)
            elif data == "settings":
                await self._show_settings_menu(callback)
            elif data == "mirrors":
                await self._show_mirrors_menu(callback)
            elif data == "chats":
                await self._show_chats_menu(callback)
            elif data == "users":
                await self._show_users_menu(callback)
            elif data == "stats":
                await self._show_stats_menu(callback)
            elif data == "help":
                await self._show_help_menu(callback)
            
            # Settings callbacks
            elif data == "toggle_render":
                await self._toggle_render_setting(callback)
            elif data == "image_size":
                await self._show_image_size_menu(callback)
            elif data == "font_settings":
                await self._show_font_settings_menu(callback)
            elif data == "log_level":
                await self._show_log_level_menu(callback)
            
            # Image size callbacks
            elif data.startswith("size_"):
                await self._set_image_size(callback, data)
            
            # Font callbacks
            elif data == "font_family":
                await self._show_font_family_menu(callback)
            elif data == "font_size": 
                await self._show_font_size_menu(callback)
            elif data.startswith("font_"):
                await self._set_font_family(callback, data)
            elif data.startswith("fontsize_"):
                await self._set_font_size(callback, data)
            elif data in ["text_color", "bg_color"]:
                await callback.answer("üé® –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            
            # Log level callbacks
            elif data.startswith("loglevel_"):
                await self._set_log_level(callback, data)
            
            # Mirrors callbacks
            elif data == "mirror_add":
                await self._show_add_mirror_menu(callback)
            elif data.startswith("mirror_view_"):
                mirror_id = data.split("_")[2]
                await self._show_mirror_details(callback, mirror_id)
            
            # Chats callbacks
            elif data == "chat_sources":
                await self._show_chat_sources(callback)
            elif data == "chat_targets":
                await self._show_chat_targets(callback)
            elif data == "chat_add":
                await self._show_add_chat_menu(callback)
            elif data.startswith("chat_source_") or data.startswith("chat_target_"):
                chat_id = data.split("_")[2]
                await self._show_chat_details(callback, chat_id)
            
            # Users callbacks
            elif data == "user_admins":
                await self._show_user_admins(callback)
            elif data == "user_allowed":
                await self._show_user_allowed(callback)
            elif data == "user_add":
                await self._show_add_user_menu(callback)
            elif data.startswith("user_admin_") or data.startswith("user_allowed_"):
                user_id = data.split("_")[2]
                await self._show_user_details(callback, user_id)
            
            # Stats callbacks
            elif data == "stats_detailed":
                await callback.answer("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
            # General callbacks
            elif data == "cancel":
                await callback.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                logger.warning(f"Unknown callback data: {data}")
            
        except Exception as e:
            logger.exception(f"Error handling callback: {callback.data}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _show_main_menu(self, callback: CallbackQuery) -> None:
        """Show main menu."""
        text = get_main_menu_text()
        keyboard = get_main_menu_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_settings_menu(self, callback: CallbackQuery) -> None:
        """Show settings menu."""
        from config import get_settings
        settings = get_settings()
        text = get_settings_menu_text()
        keyboard = get_settings_keyboard(render_enabled=settings.mirror.render_images)
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_mirrors_menu(self, callback: CallbackQuery) -> None:
        """Show mirrors menu."""
        async with self.db_manager.get_session() as session:
            mirror_repo = MirrorRepository(session)
            mirrors = await mirror_repo.get_active_mirrors()
        
        text = get_mirrors_menu_text(len(mirrors))
        keyboard = get_mirror_list_keyboard(mirrors)
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_chats_menu(self, callback: CallbackQuery) -> None:
        """Show chats menu."""
        async with self.db_manager.get_session() as session:
            chat_repo = ChatRepository(session)
            source_chats = await chat_repo.get_source_chats()
            target_chats = await chat_repo.get_target_chats()
        
        text = get_chats_menu_text(len(source_chats), len(target_chats))
        keyboard = get_chats_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_users_menu(self, callback: CallbackQuery) -> None:
        """Show users menu."""
        async with self.db_manager.get_session() as session:
            user_repo = UserRepository(session)
            admins = await user_repo.get_admins()
            allowed_users = await user_repo.get_allowed_users()
        
        text = get_users_menu_text(len(admins), len(allowed_users))
        keyboard = get_users_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_stats_menu(self, callback: CallbackQuery) -> None:
        """Show stats menu."""
        async with self.db_manager.get_session() as session:
            mirror_repo = MirrorRepository(session)
            chat_repo = ChatRepository(session)
            user_repo = UserRepository(session)
            
            mirrors = await mirror_repo.get_active_mirrors()
            chats = await chat_repo.get_source_chats()
            users = await user_repo.get_allowed_users()
        
        text = get_stats_menu_text(len(mirrors), len(chats), len(users))
        keyboard = get_stats_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_help_menu(self, callback: CallbackQuery) -> None:
        """Show help menu."""
        text = get_help_menu_text()
        keyboard = get_help_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _toggle_render_setting(self, callback: CallbackQuery) -> None:
        """Toggle render setting."""
        try:
            new_value = self.settings_manager.toggle_render_images()
            await callback.answer(f"üñºÔ∏è –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ {'–≤–∫–ª—é—á–µ–Ω' if new_value else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
            # Refresh settings menu
            await self._show_settings_menu(callback)
        except Exception as e:
            logger.exception("Error toggling render setting")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    async def _show_add_mirror_menu(self, callback: CallbackQuery) -> None:
        """Show add mirror instructions."""
        text = get_add_mirror_text()
        keyboard = get_mirrors_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_mirror_details(self, callback: CallbackQuery, mirror_id: str) -> None:
        """Show mirror details."""
        # TODO: Implement mirror details
        await callback.answer(f"üîÑ –î–µ—Ç–∞–ª–∏ –∑–µ—Ä–∫–∞–ª–∞ {mirror_id} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def _show_chat_sources(self, callback: CallbackQuery) -> None:
        """Show source chats."""
        async with self.db_manager.get_session() as session:
            chat_repo = ChatRepository(session)
            chats = await chat_repo.get_source_chats()
        
        text = f"üì§ <b>–ß–∞—Ç—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(chats)})</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
        keyboard = get_chat_sources_keyboard(chats)
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_chat_targets(self, callback: CallbackQuery) -> None:
        """Show target chats."""
        async with self.db_manager.get_session() as session:
            chat_repo = ChatRepository(session)
            chats = await chat_repo.get_target_chats()
        
        text = f"üì• <b>–ß–∞—Ç—ã-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ({len(chats)})</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
        keyboard = get_chat_targets_keyboard(chats)
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_add_chat_menu(self, callback: CallbackQuery) -> None:
        """Show add chat instructions."""
        text = get_add_chat_text()
        keyboard = get_chats_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_chat_details(self, callback: CallbackQuery, chat_id: str) -> None:
        """Show chat details."""
        # TODO: Implement chat details
        await callback.answer(f"üí¨ –î–µ—Ç–∞–ª–∏ —á–∞—Ç–∞ {chat_id} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def _show_user_admins(self, callback: CallbackQuery) -> None:
        """Show admin users."""
        async with self.db_manager.get_session() as session:
            user_repo = UserRepository(session)
            users = await user_repo.get_admins()
        
        text = f"üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ({len(users)})</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        keyboard = get_user_admins_keyboard(users)
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_user_allowed(self, callback: CallbackQuery) -> None:
        """Show allowed users."""
        async with self.db_manager.get_session() as session:
            user_repo = UserRepository(session)
            users = await user_repo.get_allowed_users()
        
        text = f"‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)})</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        keyboard = get_user_allowed_keyboard(users)
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_add_user_menu(self, callback: CallbackQuery) -> None:
        """Show add user instructions."""
        text = get_add_user_text()
        keyboard = get_users_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_user_details(self, callback: CallbackQuery, user_id: str) -> None:
        """Show user details."""
        # TODO: Implement user details
        await callback.answer(f"üë§ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def _show_image_size_menu(self, callback: CallbackQuery) -> None:
        """Show image size selection menu."""
        settings = self.settings_manager.get_current_settings()
        text = f"""
üìê <b>–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>

–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: <b>{settings['image_width']}x{settings['image_height']}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:
        """
        keyboard = get_image_size_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _set_image_size(self, callback: CallbackQuery, data: str) -> None:
        """Set image size from callback data."""
        try:
            # Parse size from callback data: "size_800_600"
            parts = data.split("_")
            width, height = int(parts[1]), int(parts[2])
            
            self.settings_manager.set_image_size(width, height)
            await callback.answer(f"üìê –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {width}x{height}")
            await self._show_image_size_menu(callback)
            
        except Exception as e:
            logger.exception("Error setting image size")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞")
    
    async def _show_font_settings_menu(self, callback: CallbackQuery) -> None:
        """Show font settings menu."""
        settings = self.settings_manager.get_current_settings()
        text = f"""
üé® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞</b>

üìù <b>–®—Ä–∏—Ñ—Ç:</b> {settings['font_family']}
üìè <b>–†–∞–∑–º–µ—Ä:</b> {settings['font_size']}px
üé® <b>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞:</b> {settings['text_color']}
üñºÔ∏è <b>–¶–≤–µ—Ç —Ñ–æ–Ω–∞:</b> {settings['background_color']}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
        """
        keyboard = get_font_settings_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _show_font_family_menu(self, callback: CallbackQuery) -> None:
        """Show font family selection menu."""
        settings = self.settings_manager.get_current_settings()
        text = f"""
üî§ <b>–í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞</b>

–¢–µ–∫—É—â–∏–π —à—Ä–∏—Ñ—Ç: <b>{settings['font_family']}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —à—Ä–∏—Ñ—Ç:
        """
        keyboard = get_font_family_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _set_font_family(self, callback: CallbackQuery, data: str) -> None:
        """Set font family from callback data."""
        try:
            # Parse font from callback data: "font_Arial"
            font_family = data.replace("font_", "").replace("Times", "Times New Roman").replace("Courier", "Courier New")
            
            self.settings_manager.set_font_family(font_family)
            await callback.answer(f"üî§ –®—Ä–∏—Ñ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {font_family}")
            await self._show_font_family_menu(callback)
            
        except Exception as e:
            logger.exception("Error setting font family")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞")
    
    async def _show_font_size_menu(self, callback: CallbackQuery) -> None:
        """Show font size selection menu."""
        settings = self.settings_manager.get_current_settings()
        text = f"""
üìè <b>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</b>

–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: <b>{settings['font_size']}px</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:
        """
        keyboard = get_font_size_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _set_font_size(self, callback: CallbackQuery, data: str) -> None:
        """Set font size from callback data."""
        try:
            # Parse size from callback data: "fontsize_14"
            font_size = int(data.replace("fontsize_", ""))
            
            self.settings_manager.set_font_size(font_size)
            await callback.answer(f"üìè –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {font_size}px")
            await self._show_font_size_menu(callback)
            
        except Exception as e:
            logger.exception("Error setting font size")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞")
    
    async def _show_log_level_menu(self, callback: CallbackQuery) -> None:
        """Show log level selection menu."""
        settings = self.settings_manager.get_current_settings()
        text = f"""
üìù <b>–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</b>

–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: <b>{settings['log_level']}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:
‚Ä¢ ERROR - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
‚Ä¢ WARNING - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
‚Ä¢ INFO - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
‚Ä¢ DEBUG - –≤—Å—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        keyboard = get_log_level_keyboard()
        await self._safe_edit_message(callback, text, keyboard)
    
    async def _set_log_level(self, callback: CallbackQuery, data: str) -> None:
        """Set log level from callback data."""
        try:
            # Parse level from callback data: "loglevel_INFO"
            log_level = data.replace("loglevel_", "")
            
            self.settings_manager.set_log_level(log_level)
            await callback.answer(f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {log_level}")
            await self._show_log_level_menu(callback)
            
        except Exception as e:
            logger.exception("Error setting log level")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–æ–≤")
    
    async def _safe_edit_message(self, callback: CallbackQuery, text: str, keyboard: InlineKeyboardMarkup) -> None:
        """Safely edit message, avoiding 'message not modified' errors."""
        try:
            if callback.message:
                # Check if content would be the same
                current_text = callback.message.text or callback.message.caption or ""
                if current_text.strip() != text.strip():
                    await callback.message.edit_text(text, reply_markup=keyboard)
                    await callback.answer()
                else:
                    # Content is the same, just answer the callback
                    await callback.answer("‚úÖ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        except Exception as e:
            logger.exception("Error editing message")
            try:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
            except:
                pass 